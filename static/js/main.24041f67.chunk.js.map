{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["defaultCardItems","key","setCardStatus","indexes","cardIndex","console","styles","StackedCarousel","style","onCardChange","containerClassName","cardClassName","leftButton","rightButton","autoRotate","rotationInterval","cardItems","children","useState","previousIndex","currentIndex","nextIndex","setIndexes","handleCardTransition","useCallback","prevState","handleLeftButton","useEffect","transitionInterval","setInterval","clearInterval","className","onClick","card","index","App","event","log","src","ReactDOM","render","document","getElementById"],"mappings":"ylBAGMA,EAAmB,CAErB,yBAAKC,IAAI,QACP,4BADF,cAEE,2BAJmB,6DAQrB,yBAAKA,IAAI,QACP,4BADF,eAEE,2BAVmB,6DAcrB,yBAAKA,IAAI,QACP,4BADF,cAEE,2BAhBN,8DAsBMC,EAAgB,SAACC,EAASC,GAK9B,OAFAC,iBAEIF,iBAAJ,EACUG,EACCH,cAAJ,EACEG,EACEH,kBAAJ,EACEG,EAEFA,GAGIC,EAAkB,SAAC,GAAyI,IAAvIC,EAAuI,EAAvIA,MAAOC,EAAgI,EAAhIA,aAAcC,EAAkH,EAAlHA,mBAAoBC,EAA8F,EAA9FA,cAAeC,EAA+E,EAA/EA,WAAYC,EAAmE,EAAnEA,YAAmE,IAAtDC,kBAAsD,aAArCC,wBAAqC,MAApB,IAAoB,EACjKC,EADiK,EAAdC,UACzJ,EADuK,EAEzIC,mBAAS,CACrCC,cAAeH,SADsB,EAErCI,aAFqC,EAGrCC,UAAW,IAHNlB,EAFgK,KAEvJmB,EAFuJ,KAQjKC,EAAuBC,uBAAY,WAGnCrB,gBAAwBa,SAA5B,EACEM,EAAW,CACTH,cAAeH,SADN,EAETI,aAFS,EAGTC,UAAW,IAGbC,GAAW,SAAAG,GAAS,MAAK,CACvBN,cAAeM,EADQ,aAEvBL,aAAcK,eAFS,EAGvBJ,UACEI,mBAA+BT,EAA/BS,SAEIA,eAAyB,QAGlC,CAACtB,EAnBJ,eAqBMuB,EAAmBF,uBAAY,WAG/BrB,gBAAJ,EACEmB,EAAW,CACTH,cAAeH,SADN,EAETI,aAAcJ,SAFL,EAGTK,UAAW,IAIbC,GAAW,SAAAG,GAAS,MAAK,CACvBJ,UAAWI,EADY,aAEvBL,aAAcK,eAFS,EAGvBN,cACEM,oBACIT,SADJS,EAEIA,eAAyB,QAGlC,CAACtB,EApBJ,eA+BA,OARAwB,qBAAU,WACRlB,GAAgBA,EAAhBA,GACA,IAAMmB,EAAqBC,aAAY,WACrCf,GAAcS,MADhB,GAGA,OAAO,kBAAMO,cAAN,MACN,CAACP,EAAsBpB,EAN1BwB,IASE,yBAAKI,UAAS,GAAKzB,GACfM,GAA0B,0BAAMmB,UAAWzB,EAAmB0B,QAASN,GAD3E,UAEE,wBAAIlB,MAAK,KAAT,GAAuBuB,UAAczB,EAAL,KAA4BI,GAAyCJ,IAClGU,EAAA,KAAc,qBACb,wBACEf,IAAKgC,EADP,IAEEF,WAAepB,GAAN,QAA4CL,EAA5C,IAA2DJ,EAAcC,EAAS+B,IAHhF,OASbrB,GAA4B,0BAAMkB,UAAWzB,EAAoB0B,QAAST,GAblF,YC9CaY,G,MAnDH,WAAO,IAAD,EACQjB,mBAAS,MADjB,mBAEVT,GAFU,UAEK,SAAC2B,GACpB/B,QAAQgC,IAAI,OAAQD,KAGtB,OACE,yBAAKL,UAAU,QAEf,kBAAC,EAAD,CACIjB,YAAY,EACZL,aAAcA,GACd,yBAAKR,IAAI,OAAOqC,IAAI,sCACpB,yBAAKrC,IAAI,OAAOqC,IAAI,sCACpB,yBAAKrC,IAAI,OAAOqC,IAAI,wCACpB,yBAAKrC,IAAI,OAAOqC,IAAI,0CAGtB,kBAAC,EAAD,CACExB,YAAY,EACZL,aAAcA,EACdC,mBAAoB,YACpBC,cAAc,OACdC,WAAY,8BAAO,KACnBC,YAAa,8BAAO,MACpB,yBAAKZ,IAAK,UACR,uCAEF,yBAAKA,IAAK,UACR,uCAEF,yBAAKA,IAAK,UACR,uCAEF,yBAAKA,IAAK,UACR,uCAEF,yBAAKA,IAAK,UACR,uCAEF,yBAAKA,IAAK,UACR,uCAEF,yBAAKA,IAAK,UACR,2CCzCVsC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.24041f67.chunk.js","sourcesContent":["import React, { useEffect, useCallback, useState } from 'react';\nimport styles from './styles.module.css'\n\nconst defaultCardItems = [\n  (\n    <div key=\"key1\">\n      <h2>First Item</h2>\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </div>\n  ),\n  (\n    <div key=\"key2\">\n      <h2>Second Item</h2>\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </div>\n  ),\n  (\n    <div key=\"key3\">\n      <h2>Third Item</h2>\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </div>\n  )\n];\n\n\nconst setCardStatus = (indexes, cardIndex) => {\n\n\n  console.log(indexes, cardIndex);\n\n  if (indexes.currentIndex === cardIndex) {\n    return  styles.active;\n  } else if (indexes.nextIndex === cardIndex) {\n    return styles.next;\n  } else if (indexes.previousIndex === cardIndex) {\n    return styles.prev;\n  }\n  return styles.inactive;\n}\n\nexport const StackedCarousel = ({ style, onCardChange, containerClassName, cardClassName, leftButton, rightButton, autoRotate=true, rotationInterval=2000, children}) => {\n  const cardItems = children || defaultCardItems;\n  const [indexes, setIndexes] = useState({\n    previousIndex: cardItems.length-1,\n    currentIndex: 0,\n    nextIndex: 1\n  });\n\n  const handleCardTransition = useCallback(() => {\n    // If we've reached the end, start again from the first card,\n    // but carry previous value over\n    if (indexes.currentIndex >= cardItems.length - 1) {\n      setIndexes({\n        previousIndex: cardItems.length - 1,\n        currentIndex: 0,\n        nextIndex: 1\n      });\n    } else {\n      setIndexes(prevState => ({\n        previousIndex: prevState.currentIndex,\n        currentIndex: prevState.currentIndex + 1 ,\n        nextIndex:\n          prevState.currentIndex + 2 === cardItems.length\n            ? 0\n            : prevState.currentIndex + 2\n      }));\n    }\n  }, [indexes.currentIndex]);\n\n  const handleLeftButton = useCallback(() => {\n    // If we've reached the end, start again from the first card,\n    // but carry previous value over\n    if (indexes.currentIndex <= 0) {\n      setIndexes({\n        previousIndex: cardItems.length - 2,\n        currentIndex: cardItems.length - 1,\n        nextIndex: 0\n      });\n\n    } else {\n      setIndexes(prevState => ({\n        nextIndex: prevState.currentIndex,\n        currentIndex: prevState.currentIndex - 1,\n        previousIndex:\n          prevState.currentIndex - 1 <= 0\n            ? cardItems.length - 1\n            : prevState.currentIndex - 2\n      }));\n    }\n  }, [indexes.currentIndex]);\n\n  \n  useEffect(() => {\n    onCardChange && onCardChange(indexes);\n    const transitionInterval = setInterval(() => {\n      autoRotate && handleCardTransition();\n    }, rotationInterval);\n    return () => clearInterval(transitionInterval);\n  }, [handleCardTransition, indexes, autoRotate]);\n\n  return (\n    <div className={`${styles.container}`}>\n      { leftButton ? leftButton : <span className={styles.leftButton} onClick={handleLeftButton} >&lsaquo;</span>}\n      <ul style={{...style}} className={`${styles.cardCarousel} ${containerClassName? containerClassName : styles.carouselDefault}`}>\n        {cardItems.map((card, index) => (\n          <li\n            key={card.key}\n            className={`${ cardClassName ? cardClassName : ''} ${styles.card} ${setCardStatus(indexes, index)}`}\n          >\n            { card }\n          </li>\n        ))}\n        </ul>\n        { rightButton ? rightButton : <span className={styles.rightButton} onClick={handleCardTransition} >&rsaquo;</span>}\n    </div>\n  );\n}\n\n\n","import React, {StyleSheet, useState} from 'react'\nimport { StackedCarousel } from 'react-stacked-carousel'\nimport 'react-stacked-carousel/dist/index.css';\nconst App = () => {\n  const [card, setCard] = useState(null);\n  const onCardChange = (event) => {\n    console.log(\"Card\", event);\n  }\n  \n  return (\n    <div className=\"main\">\n\n    <StackedCarousel\n        autoRotate={false}\n        onCardChange={onCardChange}>\n        <img key=\"img1\" src=\"https://placeimg.com/640/480/arch\" />\n        <img key=\"img2\" src=\"https://placeimg.com/640/480/tech\" />\n        <img key=\"img3\" src=\"https://placeimg.com/640/480/nature\" />\n        <img key=\"img4\" src=\"https://placeimg.com/640/480/animals\" />\n      </StackedCarousel>\n\n      <StackedCarousel\n        autoRotate={false}\n        onCardChange={onCardChange}\n        containerClassName={\"container\"}\n        cardClassName=\"card\"\n        leftButton={<span>{\"<\"}</span>}\n        rightButton={<span>{\">\"}</span>}>\n        <div key={'child1'}>\n          <h2>1 Card</h2>\n        </div>\n        <div key={'child2'}>\n          <h2>2 Card</h2>\n        </div>\n        <div key={'child3'}>\n          <h2>3 Card</h2>\n        </div>\n        <div key={'child4'}>\n          <h2>4 Card</h2>\n        </div>\n        <div key={'child5'}>\n          <h2>5 Card</h2>\n        </div>\n        <div key={'child6'}>\n          <h2>6 Card</h2>\n        </div>\n        <div key={'child7'}>\n          <h2>7 Card</h2>\n        </div>\n      </StackedCarousel>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}